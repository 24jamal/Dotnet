@model IEnumerable<INTERNMvc.Models.Employee>


@{
    ViewBag.Title = "Employee List";
}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<style>

    .btn-gradient {
        background: linear-gradient(45deg, #a45c92, #d667d0);
        color: midnightblue;
        border: none;
        padding: 8px 20px;
        font-size: 16px;
        border-radius: 5px;
        transition: background 0.3s ease-in-out;
    }

        .btn-gradient:hover {
            background: linear-gradient(45deg, #a8e063, #56ab2f);
        }


    .sortable {
        cursor: pointer;
        position: relative;
        padding-right: 20px; /* Space for the arrow */
        white-space: nowrap; /* Prevent text wrapping */
    }

        .sortable a {
            text-decoration: none;
            color: inherit;
            display: inline-block;
            padding-right: 20px; /* Match the space for the arrow */
            width: 100%;
        }

        .sortable:after {
            content: "";
            position: absolute;
            right: 5px; /* Adjust this value to move the arrow closer/further */
            top: 50%;
            transform: translateY(-50%);
            border: 5px solid transparent;
            border-top-color: #000;
            transition: transform 0.3s ease;
        }

        .sortable.sort-asc:after {
            border-top-color: transparent;
            border-bottom-color: #000;
        }

        .sortable.sort-desc:after {
            border-bottom-color: transparent;
            border-top-color: #000;
        }

</style>
<div class="row mb-3">
    <!-- Search Form -->
    <div class="col-md-6">
        <form id="searchForm" method="get" action="@Url.Action("SingleView", "Employee")" class="d-flex">
            <input type="text" id="searchInput" name="searchTerm" class="form-control me-2" placeholder="Search..." value="@ViewBag.SearchTerm" />
            <button type="submit" class="btn btn-outline-primary" style="display: none;">Search</button> <!-- Hidden submit button -->
        </form>
    </div>

    <!-- Export and Create Buttons -->
    <div class="col-md-6 text-end">
        @*   <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-target="#basicModal">
        View Analytics
        </button> *@
        <form method="get" action="@Url.Action("ExportToCsv", "Employee")" class="d-inline-block">
            <button type="submit" class="btn btn-success me-2">Export CSV</button>
        </form>
        <a href="javascript:void(0);" class="btn btn-primary" id="openCreateModal">Create Employee</a>
        <button type="button" id="testbutton" class="btn-gradient" data-bs-toggle="modal" data-bs-target="#analyticsModal">
            <img src="~/images/mylapaylogo.png" alt="Logo" style="height:20px;" /> Analytics
        </button>
    </div>
</div>




<!-- Create/Edit Modal -->
<div class="modal fade" id="employeeModal2" tabindex="-1" aria-labelledby="employeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="employeeModalLabel">Create/Edit Employee</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="employeeForm">
                    <input type="hidden" id="ID_EmployeeId" name="Id" />

                    <div class="mb-3">
                        <label for="ID_FirstName" class="form-label">First Name</label>
                        <input type="text" id="ID_FirstName" name="FirstName" class="form-control" />
                        <span id="FirstNameError" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label for="ID_LastName" class="form-label">Last Name</label>
                        <input type="text" id="ID_LastName" name="LastName" class="form-control" />
                        <span id="LastNameError" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label for="ID_DOB" class="form-label">Date of Birth</label>
                        <input type="date" id="ID_DOB" name="DateofBirth" class="form-control" />
                        <span id="DOBError" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label for="ID_Email" class="form-label">Email</label>
                        <input type="email" id="ID_Email" name="Email" class="form-control" />
                        <span id="EmailError" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label for="ID_Salary" class="form-label">Salary</label>
                        <input type="number" id="ID_Salary" name="Salary" step="0.01" class="form-control" />
                        <span id="SalaryError" class="text-danger"></span>
                    </div>

                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Delete modal -->
<div class="modal fade" id="deleteEmployeeModal" tabindex="-1" aria-labelledby="deleteEmployeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteEmployeeModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this employee?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger confirm-delete">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Analytics Modal -->
<div class="modal fade" id="analyticsModal" tabindex="-1" aria-labelledby="analyticsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="analyticsModalLabel">Employee Analytics</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Modal content -->
                <div>
                    <h4>Salary Distribution</h4>
                    <canvas id="salaryChart"></canvas>
                </div>
                <div>
                    <h4>Age Distribution</h4>
                    <canvas id="ageChart"></canvas>
                </div>
                <div>
                    <h4>Salary Stats</h4>
                    <p id="salaryStats"></p>
                </div>
                <div>
                    <h4>Age Stats</h4>
                    <p id="ageStats"></p>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Table -->
<table class="table">
    <thead>
        <tr>
            <th class="sortable @(ViewBag.SortColumn == "Id" ? (ViewBag.SortDirection == "asc" ? "sort-asc" : "sort-desc") : "")">
                <a href="@Url.Action("SingleView", "Employee", new { sortColumn = "Id", sortDirection = ViewBag.SortDirection == "asc" ? "desc" : "asc", searchTerm = ViewBag.SearchTerm })">ID</a>
            </th>
            <th class="sortable @(ViewBag.SortColumn == "FullName" ? (ViewBag.SortDirection == "asc" ? "sort-asc" : "sort-desc") : "")">
                <a href="@Url.Action("SingleView", "Employee", new { sortColumn = "FullName", sortDirection = ViewBag.SortDirection == "asc" ? "desc" : "asc", searchTerm = ViewBag.SearchTerm })">Full Name</a>
            </th>
            <th class="sortable @(ViewBag.SortColumn == "DateofBirth" ? (ViewBag.SortDirection == "asc" ? "sort-asc" : "sort-desc") : "")">
                <a href="@Url.Action("SingleView", "Employee", new { sortColumn = "DateofBirth", sortDirection = ViewBag.SortDirection == "asc" ? "desc" : "asc", searchTerm = ViewBag.SearchTerm })">Date of Birth</a>
            </th>
            <th class="sortable @(ViewBag.SortColumn == "Email" ? (ViewBag.SortDirection == "asc" ? "sort-asc" : "sort-desc") : "")">
                <a href="@Url.Action("SingleView", "Employee", new { sortColumn = "Email", sortDirection = ViewBag.SortDirection == "asc" ? "desc" : "asc", searchTerm = ViewBag.SearchTerm })">Email</a>
            </th>
            <th class="sortable @(ViewBag.SortColumn == "Salary" ? (ViewBag.SortDirection == "asc" ? "sort-asc" : "sort-desc") : "")">
                <a href="@Url.Action("SingleView", "Employee", new { sortColumn = "Salary", sortDirection = ViewBag.SortDirection == "asc" ? "desc" : "asc", searchTerm = ViewBag.SearchTerm })">Salary</a>
            </th>
            <th>Actions</th>
        </tr>
    </thead>

    <tbody id="employeeTableBody">
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FullName</td>
                <td>@item.DateofBirth.ToString("dd-MM-yyyy")</td>
                <td>@item.Email</td>
                <td>@item.Salary</td>
                <td>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-primary btnEdit" data-id="@item.Id">Edit</button>
                        <button class="btn btn-danger btnDelete" data-id="@item.Id">Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
<div>
    <ul class="pagination">
        @for (int i = 1; i <= ViewBag.TotalPages; i++)
        {
            <li class="page-item @(ViewBag.PageNumber == i ? "active" : "")">
                <a class="page-link" href="@Url.Action("SingleView", "Employee", new { page = i, sortColumn = ViewBag.SortColumn, sortDirection = ViewBag.SortDirection, searchTerm = ViewBag.SearchTerm })">@i</a>
            </li>
        }
    </ul>
</div>

<!-- JavaScript for Pagination and Modal Handling -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>



    $(document).ready(function () {
        // Open Create Modal
        $('#openCreateModal').click(function () {
            $('#employeeForm')[0].reset(); // Reset the form fields
            $('#employeeModalLabel').text('Create Employee'); // Set the modal title
            $('#employeeForm').attr('action', '/Employee/Create'); // Set the form action URL
            $('#employeeModal2').modal('show'); // Show the correct modal
        });

        // Handle Edit button click
        $('#employeeTableBody').on('click', '.btnEdit', function () {
            var employeeId = $(this).data('id');
            $.ajax({
                url: '/Employee/GetEmployeeById',
                type: 'GET',
                data: { id: employeeId },
                success: function (data) {
                    if (data) {
                        $('#ID_EmployeeId').val(data.id);
                        $('#ID_FirstName').val(data.firstName);
                        $('#ID_LastName').val(data.lastName);
                        $('#ID_DOB').val(data.dateofBirth);
                        $('#ID_Email').val(data.email);
                        $('#ID_Salary').val(data.salary);

                        $('#employeeModalLabel').text('Edit Employee');
                        $('#employeeForm').attr('action', '/Employee/UpdateEmployee');
                        $('#employeeModal2').modal('show'); // Show the correct modal
                    } else {
                        alert('Unable to fetch data.');
                    }
                },
                error: function () {
                    alert('Error in fetching data.');
                }
            });
        });

        // Handle Delete button click
        $('#employeeTableBody').on('click', '.btnDelete', function () {
            var employeeId = $(this).data('id');
            $('.confirm-delete').data('id', employeeId);  // Store the employee ID in the confirm button
            $('#deleteEmployeeModal').modal('show');
        });

        // Confirm Delete
        $(document).on('click', '.confirm-delete', function () {
            var employeeId = $(this).data('id');
            $.ajax({
                url: '/Employee/DeleteEmployeeById',
                type: 'POST',
                data: { id: employeeId },
                success: function (data) {
                    if (data.success) {
                        alert('Employee deleted successfully');
                        location.reload(); // Reload the view after deletion
                    } else {
                        alert('Error in deleting employee');
                    }
                },
                error: function () {
                    alert('Error in processing request');
                }
            });
        });

        // Handle form submission for Create/Edit
        $('#employeeForm').submit(function (e) {
            e.preventDefault(); // Prevent default form submission
            var formAction = $(this).attr('action'); // Get the action URL from the form
            $.ajax({
                url: formAction,
                type: 'POST',
                data: $(this).serialize(), // Serialize the form data
                success: function (data) {
                    if (data.success) {
                        alert('Employee saved successfully');
                        location.reload(); // Reload the view after saving
                    } else {
                        // Display validation errors
                        $('#FirstNameError').text(data.errors.FirstName || '');
                        $('#LastNameError').text(data.errors.LastName || '');
                        $('#DOBError').text(data.errors.DateofBirth || '');
                        $('#EmailError').text(data.errors.Email || '');
                        $('#SalaryError').text(data.errors.Salary || '');
                    }
                },
                error: function () {
                    alert('Employee Save Successfully');
                }
            });
        });
    });


</script>

<script>
    $(document).ready(function () {
        // Instant search on keyup
        $('#searchInput').on('keyup', function () {
            var searchTerm = $(this).val();
            $.ajax({
                url: '@Url.Action("SingleView", "Employee")',
                type: 'GET',
                data: { searchTerm: searchTerm, sortColumn: '@ViewBag.SortColumn', sortDirection: '@ViewBag.SortDirection' },
                success: function (result) {
                    $('#employeeTableBody').html($(result).find('#employeeTableBody').html());
                    $('.pagination').html($(result).find('.pagination').html());
                },
                error: function () {
                    alert('Error in fetching employees.');
                }
            });
        });
</script>

<script>
    $('#analyticsModal').click('shown.bs.modal', function () {
        $.ajax({
            url: '/Employee/GetAnalyticsData', // Adjust the URL to your controller route
            type: 'GET',
            success: function (data) {
                console.log(data);
                // Populate salary stats
                $('#salaryStats').html(`
                <p>Average Salary: ${data.salaryStats.averageSalary}</p>
                <p>Min Salary: ${data.salaryStats.minSalary}</p>
                <p>Max Salary: ${data.salaryStats.maxSalary}</p>
            `);

                // Populate age stats
                $('#ageStats').html(`
                <p>Min Age: ${data.ageStats.minAge}</p>
                <p>Max Age: ${data.ageStats.maxAge}</p>
            `);

                // Use the distribution data for charts (assuming you are using Chart.js)
                var salaryCtx = document.getElementById('salaryChart').getContext('2d');
                var salaryChart = new Chart(salaryCtx, {
                    type: 'bar',
                    data: {
                        labels: Array.from({ length: data.salaryDistribution.length }, (_, i) => i + 1),
                        datasets: [{
                            label: 'Salary',
                            data: data.salaryDistribution,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });

                var ageCtx = document.getElementById('ageChart').getContext('2d');
                var ageChart = new Chart(ageCtx, {
                    type: 'line',
                    data: {
                        labels: Array.from({ length: data.ageDistribution.length }, (_, i) => i + 1),
                        datasets: [{
                            label: 'Age',
                            data: data.ageDistribution,
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            },
            error: function (error) {
                console.log('Error fetching analytics data:', error);
            }
        });
    });

</script>

